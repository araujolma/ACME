function [CmndList] = bildQuikModl(SfunNameXten)
%BildQuikModl Build a quick-running model based on a previous one.
%   Detailed explanation goes here

%% Preparations, command loading

clc
fclose('all');
SorcFilePont = fopen(SfunNameXten,'r');
TargFilePont = fopen([SfunNameXten(1:end-2),'_quick.m'],'w');

% Main program flow:
% 1. Scan the function whose name is sent. Remove comments, ellipsis, and
% such. Obtain a command list (one command per entry).
% 2. Get replaceable functions list.
% 3. Scan the command list looking for function definitions. Separate the
% original command list into smaller lists, one for main function and each 
% subfunction.
% 4. Scan the (main function) command list, looking for variables and 
% function calls. Replace internal variables with conflict-proof names.
% Assemble struct with variables list and another with called functions.
% 5. For every called function, if it is a replaceable function or
% subfunction, call the same code for the

CmndList = loadCmndListFromFile(SorcFilePont);

% The commands here have no \n, \r, \f or similar.
NValCmnd = numel(CmndList);
% HERE, CmndList holds all the useful commands.

%% Look for replaceable functions

%For now, only the functions in the current directory

% ReplFuncStru = dir(); 

% % get only the .m files
% elimArry = zeros(size(ReplFuncStru));
% j=0;
% for k=1:length(ReplFuncStru)
%         name = ReplFuncStru(k).name;
%         if length(name)<2 || strcmp(name(end-1:end),'.m')==0
%             j=j+1;
%             elimArry(j) = k;
%         end
% end
% ReplFuncStru(elimArry(1:j)) = [];
% ReplFuncStru = rmfield(ReplFuncStru,{'date','bytes','isdir','datenum'})
% [ReplFuncStru.isSubf] = deal(false);

thisDir = dir();
% get only the .m files
NDir = length(thisDir);
ReplFuncStru(NDir).name = [];
[ReplFuncStru(1:NDir).isSubf] = deal(false);
NReplFunc=0;
for k=1:NDir
    if ~thisDir(k).isdir
        name = thisDir(k).name;
        if length(name)>2 && strcmp(name(end-1:end),'.m')
            NReplFunc=NReplFunc+1;
            % no .m at the end here:
            ReplFuncStru(NReplFunc).name = name(1:end-2); 
        end
    end
end
ReplFuncStru

% ReplFuncNameList = {ReplFuncStru(:).name}
% NReplFunc = length(ReplFuncNameList);


%% Look for function calls and variables inside main function
% next: look for function calls, beggining with internal functions
% rename their internal variables with 'iv'n, where n is the 
% smallest number for which there is no conflict.

% Look for subfunction definitions
SubfLine = zeros(NValCmnd-1,1);
SubfNmes = cell(NValCmnd-1,1);
NSubf = 0;
for k=2:NValCmnd
    if length(CmndList{k})>9 
        cmnd = CmndList{k};
        FrstNineChar = cmnd(1:9);        
        
        if strcmp(FrstNineChar,'function ') || ...
                strcmp(FrstNineChar,'function[')
            % function declaration found.
            
            NSubf = NSubf+1;
            SubfLine(NSubf) = k;
        
            % Get function name
            [BginIndx,EndIndx] = regexp(cmnd,'=[ ]*\w+[ ]*\(');
            SubfNmes{NSubf} = rmovSpac(cmnd(BginIndx+1:EndIndx-1));
            
        end
    end 
end

if NSubf>0
    SubfLine = SubfLine(1:NSubf);
    SubfNmes = SubfNmes(1:NSubf);
    SubfLine
    SubfNmes
    % Get variables list
    LastFuncCmndLine = SubfLine(1)-1
else
    LastFuncCmndLine = NValCmnd;
end

% add subfunctions to the Replaceable functions list:

for k=1:NSubf
    ReplFuncStru(NReplFunc+k).name = SubfNmes{k};
    ReplFuncStru(NReplFunc+k).isSubf = true;
end
NReplFunc = NReplFunc+NSubf;

ReplFuncStru(NReplFunc+1:end) = [];

[ReplFuncStru.isCall] = deal(false);
[ReplFuncStru.lineCall] = deal([]);
[ReplFuncStru.cmndList] = deal({});

% ReplFuncStru(:).name

% check called functions;
% for each called function (clear from internal function calls):
%   get command list from file (or subf.)
%   substitute internal variables by unique names to avoid conflict
%   substitute the function calls by their codes themselves in the higher
%   function

% [NVar,VarsStru] = getVarsInFnct(CmndList)
[NVar,VarsStru,isReplFuncCall,CallFuncStru] = getVarsInFnct(...
    CmndList(1:LastFuncCmndLine),ReplFuncStru)
% HERE, all variables are mapped.

% replace internal variables by conflict-proof names

%% Next steps


for k=1:NValCmnd
    fprintf(TargFilePont,'%s\n',CmndList{k});
end


fclose('all');

% for next step (analyzing .mdl to get the sfunction...)

% % append '.mdl' to the name of the model, if so.
% if length(ModlName)<4 || strcmp(ModlName(end-3:end),'.mdl')==0
%     ModlNameXten = [ModlName,'.mdl'];
% end


% initFileName = ['init_',ModlName];
% if ~exist(initFileName,'file') || ~exist(ModlNameXten,'file');
%     error('Model or initiation file not found.')
% end

end